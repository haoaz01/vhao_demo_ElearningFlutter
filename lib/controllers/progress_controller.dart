import 'package:get/get.dart' hide Progress;
import 'package:shared_preferences/shared_preferences.dart';
import '../model/progress_model.dart';
import '../repositories/progress_repository.dart';

class ProgressController extends GetxController {
  final ProgressRepository progressRepository = ProgressRepository();
  final RxList<Progress> progressList = <Progress>[].obs;
  final RxMap<String, bool> lessonCompletionStatus = <String, bool>{}.obs;
  final RxBool isLoading = false.obs;

  // TH√äM C√ÅC GETTER M·ªöI
  final RxBool isLoggedIn = false.obs;
  final RxInt userId = 0.obs;

  @override
  void onInit() {
    super.onInit();
    _loadUserData(); // TH√äM: T·∫£i d·ªØ li·ªáu user khi kh·ªüi t·∫°o
  }

  // TH√äM PH∆Ø∆†NG TH·ª®C M·ªöI: T·∫£i d·ªØ li·ªáu user t·ª´ SharedPreferences
  Future<void> _loadUserData() async {
    final prefs = await SharedPreferences.getInstance();
    userId.value = prefs.getInt('userId') ?? 0;
    isLoggedIn.value = prefs.getBool('isLoggedIn') ?? false;

    print("üîê ProgressController - UserId: ${userId.value}, IsLoggedIn: ${isLoggedIn.value}");
  }

  // L·∫•y userId t·ª´ SharedPreferences (GI·ªÆ NGUY√äN)
  Future<int> _getUserId() async {
    final prefs = await SharedPreferences.getInstance();
    final id = prefs.getInt('userId') ?? 0;
    userId.value = id; // C·∫¨P NH·∫¨T GI√Å TR·ªä
    return id;
  }

  // ƒê√°nh d·∫•u b√†i h·ªçc ƒë√£ ho√†n th√†nh
  Future<void> completeLesson(int lessonId) async {
    try {
      isLoading.value = true;
      final userId = await _getUserId();
      if (userId == 0) throw Exception('User ID not found');

      // TH√äM DEBUG LOG
      print("üéØ Completing lesson $lessonId for user $userId");

      await progressRepository.completeLesson(userId, lessonId);
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª•c b·ªô
      lessonCompletionStatus['$userId-$lessonId'] = true;
      // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
      await fetchProgressByUser();
    } catch (e) {
      print("‚ùå Error completing lesson: $e");
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ ƒë√°nh d·∫•u b√†i h·ªçc ƒë√£ ho√†n th√†nh: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // H·ªßy ƒë√°nh d·∫•u ho√†n th√†nh
  Future<void> uncompleteLesson(int lessonId) async {
    try {
      isLoading.value = true;
      final userId = await _getUserId();
      if (userId == 0) throw Exception('User ID not found');

      print("üéØ Uncompleting lesson $lessonId for user $userId");

      await progressRepository.uncompleteLesson(userId, lessonId);
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª•c b·ªô
      lessonCompletionStatus['$userId-$lessonId'] = false;
      // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
      await fetchProgressByUser();
    } catch (e) {
      print("‚ùå Error uncompleting lesson: $e");
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ h·ªßy ƒë√°nh d·∫•u ho√†n th√†nh: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // Ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh c·ªßa m·ªôt b√†i h·ªçc
  Future<bool> isLessonCompleted(int lessonId) async {
    final userId = await _getUserId();
    if (userId == 0) {
      print("‚ö†Ô∏è User ID is 0, cannot check completion");
      return false;
    }

    // Ki·ªÉm tra trong b·ªô nh·ªõ tr∆∞·ªõc
    if (lessonCompletionStatus.containsKey('$userId-$lessonId')) {
      final status = lessonCompletionStatus['$userId-$lessonId']!;
      print("üìö Lesson $lessonId completion status from memory: $status");
      return status;
    }

    // N·∫øu ch∆∞a c√≥, g·ªçi API ƒë·ªÉ ki·ªÉm tra
    try {
      print("üåê Checking lesson completion from API...");
      final completed = await progressRepository.checkLessonCompletion(userId, lessonId);
      lessonCompletionStatus['$userId-$lessonId'] = completed;
      print("üìö Lesson $lessonId completion status from API: $completed");
      return completed;
    } catch (e) {
      print("‚ùå Error checking lesson completion: $e");
      // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ false
      return false;
    }
  }

  // L·∫•y t·∫•t c·∫£ ti·∫øn tr√¨nh c·ªßa user
  Future<void> fetchProgressByUser() async {
    try {
      isLoading.value = true;
      final userId = await _getUserId();
      if (userId == 0) throw Exception('User ID not found');

      final List<Progress> progress = await progressRepository.getProgressByUser(userId);
      progressList.assignAll(progress); // S·ª¨A: assignAll nh·∫≠n Iterable<Progress>
    } catch (e) {
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i ti·∫øn tr√¨nh: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // L·∫•y ti·∫øn tr√¨nh theo m√¥n h·ªçc
  Future<Progress?> getProgressBySubject(int subjectId) async {
    try {
      final userId = await _getUserId();
      if (userId == 0) throw Exception('User ID not found');

      return await progressRepository.getProgressBySubject(userId, subjectId);
    } catch (e) {
      return null;
    }
  }

  // L·∫•y ti·∫øn tr√¨nh theo kh·ªëi l·ªõp
  Future<List<Progress>> getProgressByGrade(int grade) async {
    try {
      final userId = await _getUserId();
      if (userId == 0) throw Exception('User ID not found');

      return await progressRepository.getProgressByGrade(userId, grade);
    } catch (e) {
      return []; // S·ª¨A: Tr·∫£ v·ªÅ List<Progress> r·ªóng
    }
  }

// T√≠nh t·ªïng ti·∫øn tr√¨nh tr√™n t·∫•t c·∫£ c√°c m√¥n
  double get overallProgress {
    if (progressList.isEmpty) return 0.0;

    double totalPercent = 0.0;
    int count = 0;

    for (var progress in progressList) {
      totalPercent += progress.progressPercent;
      count++;
    }

    return count > 0 ? totalPercent / count : 0.0;
  }

}