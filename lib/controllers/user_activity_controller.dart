import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:get/get.dart';
import '../model/calendar_day_model.dart';
import '../model/user_activity_dto_model.dart';
import '../model/user_streak_response_model.dart';
import '../model/streak_info_model.dart';
import '../model/accumulate_session_response_model.dart';
import '../model/today_info_response_model.dart';
import '../repositories/user_activity_repository.dart';

class UserActivityController extends GetxController {
  final UserActivityRepository repository;

  UserActivityController({required this.repository});

  // D·ªØ li·ªáu streak c∆° b·∫£n (cho dashboard)
  StreakInfo? _streakInfo;
  StreakInfo? get streakInfo => _streakInfo;

  // D·ªØ li·ªáu streak + calendar (cho m√†n h√¨nh l·ªãch)
  UserStreakResponse? _streakCalendar;
  UserStreakResponse? get streakCalendar => _streakCalendar;

  // Th√¥ng tin h√¥m nay
  TodayInfoResponse? _todayInfo;
  TodayInfoResponse? get todayInfo => _todayInfo;

  // Tr·∫°ng th√°i loading
  bool _isLoading = false;
  bool get isLoading => _isLoading;

  bool _isLoadingCalendar = false;
  bool get isLoadingCalendar => _isLoadingCalendar;

  bool _isConnected = true;
  bool get isConnected => _isConnected;

  String? _error;
  String? get error => _error;

  // Session tracking
  int _currentSessionMinutes = 0;
  int get currentSessionMinutes => _currentSessionMinutes;

  DateTime? _sessionStartTime;
  bool get isSessionActive => _sessionStartTime != null;

  Timer? _sessionTimer;

  // ========== C√ÅC PH∆Ø∆†NG TH·ª®C CH√çNH ==========

  // Refresh to√†n b·ªô d·ªØ li·ªáu
  Future<void> refreshData(int userId) async {
    await Future.wait([
      fetchStreakInfo(userId),
      fetchTodayInfo(userId),
    ]);
  }

  // Force refresh (clear cache)
  Future<void> forceRefresh(int userId) async {
    _streakInfo = null;
    _streakCalendar = null;
    _todayInfo = null;
    _error = null;
    await refreshData(userId);
  }

  // ========== API CALLS ==========

  // L·∫•y th√¥ng tin streak c∆° b·∫£n (nhanh, cho dashboard)
  Future<void> fetchStreakInfo(int userId) async {
    _isLoading = true;
    _error = null;
    update();

    try {
      final connectionTest = await repository.testConnectionDetailed();
      if (!connectionTest['connected']) {
        _error = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi: ${connectionTest['error'] ?? connectionTest['message']}';
        _streakInfo = null;
        return;
      }

      _streakInfo = await repository.getStreakInfo(userId);

      if (_streakInfo == null) {
        _error = 'D·ªØ li·ªáu streak r·ªóng t·ª´ server';
      }
    } catch (e, st) {
      print('‚ùå fetchStreakInfo error: $e');
      print(st);
      _error = 'L·ªói khi l·∫•y th√¥ng tin streak: ${e.toString()}';
      _streakInfo = null;
    } finally {
      _isLoading = false;
      update();
    }
  }

  // L·∫•y th√¥ng tin streak + calendar (ƒë·∫ßy ƒë·ªß, cho m√†n h√¨nh l·ªãch)
  Future<void> fetchStreakCalendar(int userId, {int months = 3}) async {
    _isLoadingCalendar = true;
    _error = null;
    update();

    try {
      final connectionTest = await repository.testConnectionDetailed();
      if (!connectionTest['connected']) {
        _error = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi: ${connectionTest['error'] ?? connectionTest['message']}';
        _streakCalendar = null;
        return;
      }

      _streakCalendar = await repository.getUserStreakAndCalendar(userId, months: months);

      if (_streakCalendar == null) {
        _error = 'D·ªØ li·ªáu calendar r·ªóng t·ª´ server';
      }
    } catch (e, st) {
      print('‚ùå fetchStreakCalendar error: $e');
      print(st);
      _error = 'L·ªói khi l·∫•y d·ªØ li·ªáu l·ªãch: ${e.toString()}';
      _streakCalendar = null;
    } finally {
      _isLoadingCalendar = false;
      update();
    }
  }

  // L·∫•y th√¥ng tin h√¥m nay
  Future<void> fetchTodayInfo(int userId) async {
    try {
      _todayInfo = await repository.getTodayInfo(userId);
      update();
    } catch (e) {
      print('‚ùå fetchTodayInfo error: $e');
      // Kh√¥ng set error v√¨ ƒë√¢y kh√¥ng ph·∫£i operation ch√≠nh
    }
  }

  // ========== SESSION MANAGEMENT ==========

  // C·ªông d·ªìn session time (PH∆Ø∆†NG TH·ª®C CH√çNH THAY TH·∫æ recordActivity)
  Future<AccumulateSessionResponse?> accumulateSessionTime({
    required int userId,
    required int sessionMinutes,
  }) async {
    try {
      final response = await repository.accumulateSessionTime(
        userId: userId,
        activityDate: DateTime.now(),
        sessionMinutes: sessionMinutes,
      );

      if (response.success) {
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu local ngay l·∫≠p t·ª©c
        if (_todayInfo != null) {
          _todayInfo = TodayInfoResponse(
            success: true,
            date: _todayInfo!.date,
            totalMinutes: response.newTotalMinutes,
            isStudiedDay: response.isStudiedDay,
            minStudyMinutes: _todayInfo!.minStudyMinutes,
            remainingMinutes: response.remainingMinutes,
          );
        }

        if (_streakInfo != null) {
          _streakInfo = StreakInfo(
            success: true,
            currentStreak: response.isStudiedDay && response.statusChanged
                ? _streakInfo!.currentStreak + 1
                : _streakInfo!.currentStreak,
            todayMinutes: response.newTotalMinutes,
            minStudyMinutes: _streakInfo!.minStudyMinutes,
            remainingMinutes: response.remainingMinutes,
          );
        }

        // Th√¥ng b√°o n·∫øu v·ª´a ƒë·∫°t m·ª•c ti√™u
        if (response.statusChanged && response.isStudiedDay) {
          _showAchievementNotification();
        }

        update();

        //check
        return null; // ƒê√É S·ª¨A: Tr·∫£ v·ªÅ response thay v√¨ AccumulateSessionResponse


      } else {
        _error = 'L·ªói t·ª´ server: ${response.message}';
        update();
        return null;
      }
    } catch (e) {
      print('‚ùå accumulateSessionTime error: $e');
      _error = 'L·ªói c·ªông d·ªìn th·ªùi gian h·ªçc: ${e.toString()}';
      update();
      return null;
    }
  }

  // B·∫Øt ƒë·∫ßu study session
  void startStudySession() {
    if (_sessionStartTime != null) return; // ƒê√£ c√≥ session active

    _sessionStartTime = DateTime.now();
    _currentSessionMinutes = 0;

    // Timer c·∫≠p nh·∫≠t m·ªói ph√∫t
    _sessionTimer = Timer.periodic(const Duration(minutes: 1), (timer) {
      if (_sessionStartTime != null) {
        _currentSessionMinutes = DateTime.now().difference(_sessionStartTime!).inMinutes;

        // T·ª± ƒë·ªông g·ª≠i c·∫≠p nh·∫≠t m·ªói 5 ph√∫t ho·∫∑c khi ƒë·∫°t milestones
        if (_currentSessionMinutes % 5 == 0 || _currentSessionMinutes == 15) {
          _autoSendSessionUpdate();
        }

        update();
      }
    });

    update();
  }

  // K·∫øt th√∫c study session v√† g·ª≠i d·ªØ li·ªáu
  Future<void> endStudySession(int userId) async {
    _sessionTimer?.cancel();
    _sessionTimer = null;

    if (_sessionStartTime != null && _currentSessionMinutes > 0) {
      await accumulateSessionTime(
        userId: userId,
        sessionMinutes: _currentSessionMinutes,
      );
    }

    _sessionStartTime = null;
    _currentSessionMinutes = 0;
    update();
  }

  // T·ª± ƒë·ªông g·ª≠i c·∫≠p nh·∫≠t session (cho session d√†i)
  Future<void> _autoSendSessionUpdate() async {
    // C√≥ th·ªÉ th√™m logic g·ª≠i c·∫≠p nh·∫≠t t·ª± ƒë·ªông ·ªü ƒë√¢y
    // ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu n·∫øu app b·ªã ƒë√≥ng ƒë·ªôt ng·ªôt
    print('üîÑ Auto session update: $_currentSessionMinutes ph√∫t');
  }

  // ========== HELPER METHODS ==========

  // Ki·ªÉm tra xem h√¥m nay ƒë√£ ƒë·∫°t m·ª•c ti√™u ch∆∞a
  bool get isTodayTargetAchieved {
    return _todayInfo?.isStudiedDay == true ||
        _streakInfo?.isTargetAchieved == true;
  }

  // L·∫•y s·ªë ph√∫t c√≤n l·∫°i ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u
  int get remainingMinutes {
    return _todayInfo?.remainingMinutes ??
        _streakInfo?.remainingMinutes ??
        (15 - (_todayInfo?.totalMinutes ?? 0));
  }

  // L·∫•y t·ªïng s·ªë ph√∫t h·ªçc h√¥m nay
  int get todayTotalMinutes {
    return _todayInfo?.totalMinutes ??
        _streakInfo?.todayMinutes ??
        0;
  }

  // L·∫•y current streak
  int get currentStreak {
    return _streakInfo?.currentStreak ??
        _streakCalendar?.currentStreak ??
        0;
  }

  // Th√¥ng b√°o th√†nh t√≠ch
  void _showAchievementNotification() {
    // C√≥ th·ªÉ s·ª≠ d·ª•ng Get.snackbar ho·∫∑c custom notification
    Get.snackbar(
      'üéâ Ch√∫c m·ª´ng!',
      'B·∫°n ƒë√£ ho√†n th√†nh m·ª•c ti√™u 15 ph√∫t h·ªçc t·∫≠p h√¥m nay!',
      duration: const Duration(seconds: 5),
      snackPosition: SnackPosition.TOP,
    );

    // Ho·∫∑c trigger event cho UI
    update();
  }

  // X√≥a l·ªói
  void clearError() {
    _error = null;
    update();
  }

  // Ki·ªÉm tra k·∫øt n·ªëi
  Future<void> checkConnection() async {
    try {
      final result = await repository.testConnectionDetailed();
      _isConnected = result['connected'] == true;
      update();
    } catch (e) {
      _isConnected = false;
      update();
    }
  }

  @override
  void onClose() {
    _sessionTimer?.cancel();
    super.onClose();
  }

  // ========== DEBUG METHODS ==========

  void printDebugInfo() {
    print('=== DEBUG CONTROLLER STATE ===');
    print('Streak Info: ${_streakInfo?.currentStreak} ng√†y');
    print('Today Minutes: ${_todayInfo?.totalMinutes} ph√∫t');
    print('Session Active: $isSessionActive ($currentSessionMinutes ph√∫t)');
    print('Today Target Achieved: $isTodayTargetAchieved');
    print('=============================');
  }
}